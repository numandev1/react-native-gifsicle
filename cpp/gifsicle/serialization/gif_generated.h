// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GIF_ANIMATELY_FLAT_H_
#define FLATBUFFERS_GENERATED_GIF_ANIMATELY_FLAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace animately {
namespace flat {

struct Gif;
struct GifBuilder;

struct ImageSize;

struct Image;
struct ImageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) ImageSize FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t left_;
  uint16_t top_;
  uint16_t width_;
  uint16_t height_;

 public:
  ImageSize()
      : left_(0),
        top_(0),
        width_(0),
        height_(0) {
  }
  ImageSize(uint16_t _left, uint16_t _top, uint16_t _width, uint16_t _height)
      : left_(::flatbuffers::EndianScalar(_left)),
        top_(::flatbuffers::EndianScalar(_top)),
        width_(::flatbuffers::EndianScalar(_width)),
        height_(::flatbuffers::EndianScalar(_height)) {
  }
  uint16_t left() const {
    return ::flatbuffers::EndianScalar(left_);
  }
  uint16_t top() const {
    return ::flatbuffers::EndianScalar(top_);
  }
  uint16_t width() const {
    return ::flatbuffers::EndianScalar(width_);
  }
  uint16_t height() const {
    return ::flatbuffers::EndianScalar(height_);
  }
};
FLATBUFFERS_STRUCT_END(ImageSize, 8);

struct Gif FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GifBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_BACKGROUND = 8,
    VT_LOOPCOUNT = 10,
    VT_IMAGES = 12,
    VT_GLOBAL = 14
  };
  uint16_t width() const {
    return GetField<uint16_t>(VT_WIDTH, 0);
  }
  uint16_t height() const {
    return GetField<uint16_t>(VT_HEIGHT, 0);
  }
  int16_t background() const {
    return GetField<int16_t>(VT_BACKGROUND, 0);
  }
  int32_t loopcount() const {
    return GetField<int32_t>(VT_LOOPCOUNT, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<animately::flat::Image>> *images() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<animately::flat::Image>> *>(VT_IMAGES);
  }
  const ::flatbuffers::Vector<uint8_t> *global() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_GLOBAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_WIDTH, 2) &&
           VerifyField<uint16_t>(verifier, VT_HEIGHT, 2) &&
           VerifyField<int16_t>(verifier, VT_BACKGROUND, 2) &&
           VerifyField<int32_t>(verifier, VT_LOOPCOUNT, 4) &&
           VerifyOffset(verifier, VT_IMAGES) &&
           verifier.VerifyVector(images()) &&
           verifier.VerifyVectorOfTables(images()) &&
           VerifyOffset(verifier, VT_GLOBAL) &&
           verifier.VerifyVector(global()) &&
           verifier.EndTable();
  }
};

struct GifBuilder {
  typedef Gif Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_width(uint16_t width) {
    fbb_.AddElement<uint16_t>(Gif::VT_WIDTH, width, 0);
  }
  void add_height(uint16_t height) {
    fbb_.AddElement<uint16_t>(Gif::VT_HEIGHT, height, 0);
  }
  void add_background(int16_t background) {
    fbb_.AddElement<int16_t>(Gif::VT_BACKGROUND, background, 0);
  }
  void add_loopcount(int32_t loopcount) {
    fbb_.AddElement<int32_t>(Gif::VT_LOOPCOUNT, loopcount, 0);
  }
  void add_images(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<animately::flat::Image>>> images) {
    fbb_.AddOffset(Gif::VT_IMAGES, images);
  }
  void add_global(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> global) {
    fbb_.AddOffset(Gif::VT_GLOBAL, global);
  }
  explicit GifBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Gif> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Gif>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Gif> CreateGif(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t width = 0,
    uint16_t height = 0,
    int16_t background = 0,
    int32_t loopcount = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<animately::flat::Image>>> images = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> global = 0) {
  GifBuilder builder_(_fbb);
  builder_.add_global(global);
  builder_.add_images(images);
  builder_.add_loopcount(loopcount);
  builder_.add_background(background);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Gif> CreateGifDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t width = 0,
    uint16_t height = 0,
    int16_t background = 0,
    int32_t loopcount = 0,
    const std::vector<::flatbuffers::Offset<animately::flat::Image>> *images = nullptr,
    const std::vector<uint8_t> *global = nullptr) {
  auto images__ = images ? _fbb.CreateVector<::flatbuffers::Offset<animately::flat::Image>>(*images) : 0;
  auto global__ = global ? _fbb.CreateVector<uint8_t>(*global) : 0;
  return animately::flat::CreateGif(
      _fbb,
      width,
      height,
      background,
      loopcount,
      images__,
      global__);
}

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_BITMAP = 6,
    VT_LOCAL = 8,
    VT_TRANSPARENT = 10,
    VT_DELAY = 12,
    VT_DISPOSAL = 14,
    VT_INTERLACE = 16
  };
  const animately::flat::ImageSize *size() const {
    return GetStruct<const animately::flat::ImageSize *>(VT_SIZE);
  }
  const ::flatbuffers::Vector<uint8_t> *bitmap() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_BITMAP);
  }
  const ::flatbuffers::Vector<uint8_t> *local() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LOCAL);
  }
  ::flatbuffers::Optional<uint8_t> transparent() const {
    return GetOptional<uint8_t, uint8_t>(VT_TRANSPARENT);
  }
  uint16_t delay() const {
    return GetField<uint16_t>(VT_DELAY, 0);
  }
  uint8_t disposal() const {
    return GetField<uint8_t>(VT_DISPOSAL, 0);
  }
  bool interlace() const {
    return GetField<uint8_t>(VT_INTERLACE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<animately::flat::ImageSize>(verifier, VT_SIZE, 2) &&
           VerifyOffset(verifier, VT_BITMAP) &&
           verifier.VerifyVector(bitmap()) &&
           VerifyOffset(verifier, VT_LOCAL) &&
           verifier.VerifyVector(local()) &&
           VerifyField<uint8_t>(verifier, VT_TRANSPARENT, 1) &&
           VerifyField<uint16_t>(verifier, VT_DELAY, 2) &&
           VerifyField<uint8_t>(verifier, VT_DISPOSAL, 1) &&
           VerifyField<uint8_t>(verifier, VT_INTERLACE, 1) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(const animately::flat::ImageSize *size) {
    fbb_.AddStruct(Image::VT_SIZE, size);
  }
  void add_bitmap(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> bitmap) {
    fbb_.AddOffset(Image::VT_BITMAP, bitmap);
  }
  void add_local(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> local) {
    fbb_.AddOffset(Image::VT_LOCAL, local);
  }
  void add_transparent(uint8_t transparent) {
    fbb_.AddElement<uint8_t>(Image::VT_TRANSPARENT, transparent);
  }
  void add_delay(uint16_t delay) {
    fbb_.AddElement<uint16_t>(Image::VT_DELAY, delay, 0);
  }
  void add_disposal(uint8_t disposal) {
    fbb_.AddElement<uint8_t>(Image::VT_DISPOSAL, disposal, 0);
  }
  void add_interlace(bool interlace) {
    fbb_.AddElement<uint8_t>(Image::VT_INTERLACE, static_cast<uint8_t>(interlace), 0);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const animately::flat::ImageSize *size = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> bitmap = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> local = 0,
    ::flatbuffers::Optional<uint8_t> transparent = ::flatbuffers::nullopt,
    uint16_t delay = 0,
    uint8_t disposal = 0,
    bool interlace = false) {
  ImageBuilder builder_(_fbb);
  builder_.add_local(local);
  builder_.add_bitmap(bitmap);
  builder_.add_size(size);
  builder_.add_delay(delay);
  builder_.add_interlace(interlace);
  builder_.add_disposal(disposal);
  if(transparent) { builder_.add_transparent(*transparent); }
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Image> CreateImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const animately::flat::ImageSize *size = nullptr,
    const std::vector<uint8_t> *bitmap = nullptr,
    const std::vector<uint8_t> *local = nullptr,
    ::flatbuffers::Optional<uint8_t> transparent = ::flatbuffers::nullopt,
    uint16_t delay = 0,
    uint8_t disposal = 0,
    bool interlace = false) {
  auto bitmap__ = bitmap ? _fbb.CreateVector<uint8_t>(*bitmap) : 0;
  auto local__ = local ? _fbb.CreateVector<uint8_t>(*local) : 0;
  return animately::flat::CreateImage(
      _fbb,
      size,
      bitmap__,
      local__,
      transparent,
      delay,
      disposal,
      interlace);
}

inline const animately::flat::Gif *GetGif(const void *buf) {
  return ::flatbuffers::GetRoot<animately::flat::Gif>(buf);
}

inline const animately::flat::Gif *GetSizePrefixedGif(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<animately::flat::Gif>(buf);
}

inline bool VerifyGifBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<animately::flat::Gif>(nullptr);
}

inline bool VerifySizePrefixedGifBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<animately::flat::Gif>(nullptr);
}

inline void FinishGifBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<animately::flat::Gif> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGifBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<animately::flat::Gif> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat
}  // namespace animately

#endif  // FLATBUFFERS_GENERATED_GIF_ANIMATELY_FLAT_H_
